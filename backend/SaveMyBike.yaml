swagger: '2.0'
info:
  version: '1.0'
  title: "SaveMyBike"
  description: REST API to expose SaveMyBike objects to external services
  license:
    name: MIT
    url: https://github.com/apiaryio/polls-api/blob/master/LICENSE
host: private-013d90-savemybike.apiary-mock.com
basePath: /
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /users:
    get:
      summary: List All Users
      parameters:
        - in: query
          name: page
          type: integer
          description: Pagination
        - in: query
          name: per_page
          type: integer
          description: Page size
      responses:
        200:
          description: Successful Response
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
          examples:
            application/json:
              - id: 74c16546-8e89-43e2-a6fc-c749255162df
                href: 'https://private-013d90-savemybike.apiary-mock.com/users/74c16546-8e89-43e2-a6fc-c749255162df'
    post:
      description: >-
        You may create a new user with this
      summary: Create a New User
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserRequest'
      responses:
        201:
          description: ''
          schema:
            $ref: '#/definitions/User'
          examples:
            application/json:
                id: 74c16546-8e89-43e2-a6fc-c749255162df
                last_update: '2018-08-05T08:40:51.620Z'
  /users/{userId}:
    x-REMsummary: Get a user by ID
    get:
      summary: Get a user by ID
      parameters:
        - in: path
          name: userId
          type: string
          required: true
          description: ID of the user to get
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/User"
          examples:
            application/json:
              - id: 74c16546-8e89-43e2-a6fc-c749255162df
                username: dippy_the_dawg
                last_update: '2015-08-05T08:40:51.620Z'
                name: Pippo
                profile_photo: 'https://cdn.pixabay.com/photo/2018/01/25/20/25/competition-3106974_640.jpg'
                properties:
                  vehiclesHref: 'https://private-013d90-savemybike.apiary-mock.com/users/74c16546-8e89-43e2-a6fc-c749255162df/vehicles'
                  configHref: 'https://private-013d90-savemybike.apiary-mock.com/users/74c16546-8e89-43e2-a6fc-c749255162df/config'
  /users/{userId}/config:
    get:
      summary: Get the user config
      description: Only the user should have access to his config
      parameters:
        - in: path
          name: userId
          type: string
          required: true
          description: ID of the user to get
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/UserConfig"
          examples:
            application/json:
              
  /users/{userId}/tracks:
    get:
      summary: Get the user tracks
      description: Only the user should have access to his tracks
      parameters:
        - in: path
          name: userId
          type: string
          required: true
          description: ID of the user
        - in: query
          name: page
          type: integer
          description: Pagination
        - in: query
          name: per_page
          type: integer
          description: Page size
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Track"
          examples:
            application/json:
    post:
      summary: Create a new track
      description: Only the user should have access to his config
      parameters:
        - in: path
          name: userId
          type: string
          required: true
          description: ID of the user to get
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Track"
          examples:
            application/json:
              
  /users/{userId}/vehicles:
    x-REMsummary: Get Users
    get:
      summary: List all vehicles of the user
      parameters:
        - in: path
          name: userId
          type: string
          required: true
          description: ID of the user
        - in: query
          name: page
          type: integer
          description: Pagination
        - in: query
          name: per_page
          type: integer
          description: Page size
      responses:
        200:
          description: Successful Response
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
          examples:
            application/json:
              vehicles:
                - id: 123456
                  href: 'https://private-013d90-savemybike.apiary-mock.com/users/74c16546-8e89-43e2-a6fc-c749255162df/vehicles/123456'
                - id: 987654
                  href: 'https://private-013d90-savemybike.apiary-mock.com/users/74c16546-8e89-43e2-a6fc-c749255162df/vehicles/987654'

    post:
      description: You may create a new user with this
      summary: Create a New Vehicle
      parameters:
        - in: path
          name: userId
          type: string
          required: true
          description: ID of the user
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/VehicleRequest'
      responses:
        201:
          description: ''
          schema:
            $ref: '#/definitions/User'
          examples:
            application/json:
              id: 987654
              href: 'https://private-013d90-savemybike.apiary-mock.com/users/74c16546-8e89-43e2-a6fc-c749255162df/vehicles/987654'

  /users/{userId}/vehicles/{vehicle_id}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: userId
        in: path
        type: string
        required: true
        description: ID of the user
      - name: vehicle_id
        in: path
        required: true
        type: string
      - name: "Content-Type"
        in: "header"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Vehicle"
          examples:
            application/json:
              - id: 987654
                last_update: '2015-08-01T08:12:34.567Z'
                type: Bike
                name: Pistidda
                status: ok
                lastPosition:
                  type: Feature
                  properties: {}
                  geometry:
                    type: Point
                    coordinates:
                    - 10.400222539901733
                    - 43.708407837943355
                photo: 'https://cdn.pixabay.com/photo/2017/04/02/22/12/bike-2197011_640.jpg'
                properties:
                  tagsHref: 'https://private-013d90-savemybike.apiary-mock.com/users/74c16546-8e89-43e2-a6fc-c749255162df/vehicles/987654/tags'
            stolen:
              - id: 123456
                last_update: '2015-08-05T08:40:51.620Z'
                type: Bike
                name: Bianchi
                status: stolen
                lastPosition:
                  type: Feature
                  properties: {}
                  geometry:
                    type: Point
                    coordinates:
                    - 10.40227174758911
                    - 43.71640711077645
    post:
      description: Update a Vehicle
      summary: POST
      parameters:
        - name: userId
          in: path
          type: string
          required: true
          description: ID of the user
        - name: vehicle_id
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/VehicleUpdate'
      responses:
        201:
          description: ''
          schema:
            $ref: '#/definitions/Vehicle'
          examples:
            application/json:
              id: 987654
              href: 'https://private-013d90-savemybike.apiary-mock.com/users/74c16546-8e89-43e2-a6fc-c749255162df/vehicles/987654'

  /users/{userId}/vehicles/{vehicle_id}/tags:
    get:
      description: Get bike tags
      produces:
      - "application/json"
      parameters:
        - name: "Content-Type"
          in: "header"
          required: false
          type: "string"
        - name: "vehicle_id"
          in: "path"
          required: true
          type: "string"
        - in: path
          name: userId
          type: integer
          required: true
          description: Numeric ID of the user
        - in: query
          name: page
          type: integer
          description: Pagination
        - in: query
          name: per_page
          type: integer
          description: Page size
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Tag"
          examples:
            application/json:
              - id: 0000001
              - id: 0000002
              - id: 0000003
              - id: 0000004
              - id: 0000005
              - id: 0000006
    post:
      summary: POST
      description: Add a new tag to the bike
      parameters:
        - in: path
          name: userId
          type: integer
          required: true
          description: Numeric ID of the user
        - name: "vehicle_id"
          in: "path"
          required: true
          type: "string"
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/TagRequest'
      responses:
        201:
          description: ''
          schema:
            $ref: '#/definitions/Tag'
          examples:
            application/json:
                id: 0000001
  /vehicles/:
    get:
      summary: Search the vehicle list based on provided parameters
      parameters:
        - in: query
          name: tagId
          type: integer
          required: false
          description: Numeric ID of the tag
        - in: query
          name: status
          type: integer
          required: false
          description: Status of the vehicle
      responses:
        200:
          description: Successful Response
          schema:
            type: object
            items:
              $ref: '#/definitions/Vehicle'
          examples:
            application/json:
              id: 987654
              href: 'https://private-013d90-savemybike.apiary-mock.com/users/74c16546-8e89-43e2-a6fc-c749255162df/vehicles/987654'
              ownerHref: 'https://private-013d90-savemybike.apiary-mock.com/users/74c16546-8e89-43e2-a6fc-c749255162df'

  /vehicles/{vehicle_id}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: vehicle_id
        in: path
        required: true
        type: string
      - name: "Content-Type"
        in: "header"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Vehicle"
          examples:
            application/json:
              - id: 987654
                last_update: '2015-08-01T08:12:34.567Z'
                type: Bike
                name: Pistidda
                status: ok
                lastPosition:
                  type: Feature
                  properties: {}
                  geometry:
                    type: Point
                    coordinates:
                    - 10.400222539901733
                    - 43.708407837943355
                image: 'https://cdn.pixabay.com/photo/2017/04/02/22/12/bike-2197011_640.jpg'
                properties:
                  tagsHref: 'https://private-013d90-savemybike.apiary-mock.com/users/74c16546-8e89-43e2-a6fc-c749255162df/vehicles/987654/tags'
            stolen:
              - id: 123456
                last_update: '2015-08-05T08:40:51.620Z'
                type: Bike
                name: Bianchi
                status: stolen
                lastPosition:
                  type: Feature
                  properties: {}
                  geometry:
                    type: Point
                    coordinates:
                    - 10.40227174758911
                    - 43.71640711077645
    post:
      description: Update a Vehicle
      summary: POST
      parameters:
        - name: vehicle_id
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/VehicleUpdate'
      responses:
        201:
          description: ''
          schema:
            $ref: '#/definitions/Vehicle'
          examples:
            application/json:
              id: 987654
              href: 'https://private-013d90-savemybike.apiary-mock.com/vehicles/987654'

  /vehicles/{vehicle_id}/tags:
    get:
      description: Get bike tags
      produces:
      - "application/json"
      parameters:
        - name: "Content-Type"
          in: "header"
          required: false
          type: "string"
        - name: "vehicle_id"
          in: "path"
          required: true
          type: "string"
        - in: query
          name: page
          type: integer
          description: Pagination
        - in: query
          name: per_page
          type: integer
          description: Page size
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Tag"
          examples:
            application/json:
              - id: 0000001
              - id: 0000002
              - id: 0000003
              - id: 0000004
              - id: 0000005
              - id: 0000006
    post:
      summary: POST
      description: Add a new tag to the bike
      parameters:
        - name: vehicle_id
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/TagRequest'
      responses:
        201:
          description: ''
          schema:
            $ref: '#/definitions/Tag'
          examples:
            application/json:
                id: 0000001
definitions:
  UserRequest:
    title: User Request
    type: object
    properties:
      name:
        type: string
      properties:
        type: array
        items:
          type: object
    required:
      - name
    example:
      username: Th3B3stD0G
      properties:
        - name : Pluto
  User:
    title: User
    type: object
    properties:
      id:
        type: integer
        format: int32
      username:
        type: string
    required:
      - id
      - username
  VehicleRequest:
    title: Vehicle Request
    type: object
    properties:
      name:
        type: string
      properties:
        type: array
        items:
          type: object
    required:
      - name
    example:
      username: Th3B3stD0G
      properties:
        - name : Pluto
  Vehicle:
    title: Vehicle
    type: object
    properties:
      id:
        type: integer
        format: int32
    required:
      - id
  VehicleUpdate:
    title: Found a bike
    type: object
    properties:
      type: 
        format: BikeType
      name:
        format: String
      status: 
        format: BikeStatus
      lastPosition:
        format: GeoJSON
    example:
      lastPosition:
        type: Feature
        properties: {}
        geometry: 
          type: Point
          coordinates:
            - 10.400243997573853
            - 43.7206913039888
  Tag:
    title: Tag
    type: object
    properties:
      id:
        type: integer
        format: int32
    required:
      - id
  TagRequest:
    title: Tag Request
    type: object
    properties:
      id:
        type: integer
        format: int32
    required:
      - id
    example:
      id: 0215634258
  UserConfig:
    title: User Config
    type: object
  Track:
    title: User Tracks
    type: array
    